{% extends "templates/SHMEM/shmem-boilerplate.c.j2" %}

{% block race_labels %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "remote",
    "ACCESS_SET": ["rma write","rma write"],
    "RACE_PAIR": ["shmem_int_put@{race_loc1}","shmem_int_put@{race_loc2}"],
    "NPROCS": 2,
    "CONSISTENCY_CALLS": ["shmem_set_lock,shmem_clear_lock"],
    "SYNC_CALLS": ["shmem_set_lock,shmem_clear_lock,shmem_barrier_all"],
    "DESCRIPTION": "Two conflicting operations put and put, where only the first access is correcly ordered by a lock."
}
*/
// RACE LABELS END
{% endblock race_labels %}

{%- block preamble %}
#include <unistd.h>
{% endblock preamble%}

{% block main %}
    static long lock;

    shmem_barrier_all();

    if (my_pe == 0) {
        // make it probable that PE 1 locks first to make race observable
        sleep(1);
        localbuf = 42;
        shmem_set_lock( &lock );
        // CONFLICT
        shmem_int_put( &remote, &localbuf, 1, 1 );
        shmem_clear_lock( &lock );
    }

    if (my_pe == 1) {
        shmem_set_lock( &lock );
        shmem_clear_lock( &lock );

        localbuf = 1337;
        // CONFLICT
        shmem_int_put( &remote, &localbuf, 1, 1 );
    }

    shmem_barrier_all();

    printf( "PE %d: localbuf = %d, remote = %d, \n", my_pe, localbuf, remote );

{% endblock %}