{% extends "templates/SHMEM/shmem-boilerplate.c.j2" %}

{% block race_labels %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "none",
    "ACCESS_SET": ["rma write","load"],
    "NPROCS": 2,
    "CONSISTENCY_CALLS": ["shmem_fence"],
    "SYNC_CALLS": ["shmem_atomic_set,shmem_wait_until"],
    "DESCRIPTION": "Two conflicting operations put and load synchronized via wait_until. put is finished before load}."
}
*/
// RACE LABELS END
{% endblock race_labels %}

{% block main %}

    static int flag = 0;

    shmem_barrier_all();

    if( my_pe == 0 )
    {
        int myval = 42;
        shmem_int_put(&remote, &myval, 1, 1);

        shmem_fence();

        shmem_int_atomic_set( &flag, 1, 1 );
    }

    shmem_quiet();

    if( my_pe == 1 )
    {
        shmem_int_wait_until( &flag, SHMEM_CMP_EQ, 1 );

        printf("remote is %d", remote);
    }

    shmem_barrier_all();

{% endblock main %}
