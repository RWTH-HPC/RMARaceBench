{% extends "templates/SHMEM/shmem-boilerplate.c.j2" %}

{%- block race_labels %}
{%- if race %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "remote",
    "ACCESS_SET": ["rma write","rma read"],
    "RACE_PAIR": ["shmem_int_put@{race_loc1}","shmem_int_get@{race_loc2}"],
    "NPROCS": 2,
    "CONSISTENCY_CALLS": ["shmem_barrier_all"],
    "SYNC_CALLS": ["shmem_barrier_all"],
    "DESCRIPTION": "Two conflicting operations put and get which are not correctly separated by a shmem_quiet leading to a remote race. The shmem_quiet should be in between the two conflicting operations to be correct."
}
*/
// RACE LABELS END
{%- else %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "none",
    "ACCESS_SET": ["rma write","rma read"],
    "NPROCS": 2,
    "CONSISTENCY_CALLS": ["shmem_barrier_all"],
    "SYNC_CALLS": ["shmem_barrier_all"],
    "DESCRIPTION": "Two conflicting operations put and get which are correctly separated by a shmem_quiet."
}
*/
// RACE LABELS END
{%- endif %}
{%- endblock race_labels %}

{% block main %}

    shmem_barrier_all();

    if( my_pe == 0 )
    {
        int source = 1;
{% if race %}
        int myval = 42;
        // CONFLICT
        shmem_int_put(&remote, &myval, 1, 1);
        // CONFLICT
        shmem_int_get(&localbuf, &remote, 1, 1);
        shmem_barrier_all();
{% else %}
        int myval = 42;
        shmem_int_put(&remote, &myval, 1, 1);
        shmem_barrier_all();
        shmem_int_get(&localbuf, &remote, 1, 1);
{% endif %}
    } else {
        shmem_barrier_all();
    }

    shmem_barrier_all();

    printf( "PE %d: localbuf = %d, remote = %d, \n", my_pe, localbuf, remote );

{% endblock main %}
