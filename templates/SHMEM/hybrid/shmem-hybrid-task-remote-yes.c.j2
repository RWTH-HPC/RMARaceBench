{% extends "templates/SHMEM/shmem-boilerplate.c.j2" %}

{%- block race_labels %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "remote",
    "ACCESS_SET": ["rma write","load"],
    "RACE_PAIR": ["shmem_put_nbi@{race_loc1}","LOAD@{race_loc2}"],
    "CONSISTENCY_CALLS": ["shmem_quiet"],
    "SYNC_CALLS": ["shmem_sync_all"],
    "NPROCS": 2,
    "DESCRIPTION": "Two conflicting operations shmem_put_nbi and a local load with missing synchronization at process 1. Since there is no taskwait, local load and shmem_sync_all are concurrent, resulting in a remote race."
}
*/
// RACE LABELS END
{%- endblock race_labels %}

{% block preamble %}
{% endblock preamble %}

{% block additional_declarations %}
#include <unistd.h>

void my_signal(int *s) {
    #pragma omp atomic
    (*s)++;
}

void my_wait(int* s, int v) {
    int wait = 0;
    do {
        usleep(10);
        #pragma omp atomic read
        wait = (*s);
    } while (wait < v);
}
{% endblock additional_declarations  %}

{% block main %}

    if (my_pe == 0) {
        // CONFLICT
        shmem_put_nbi(&remote, &localbuf, 1, 1);
        shmem_quiet();
        shmem_sync_all();
    }

    if (my_pe == 1) {
        int flag = 0;
        #pragma omp parallel num_threads(2) shared(flag)
        {
            #pragma omp single
            {
                #pragma omp task shared(flag)
                {
                    my_signal(&flag);
                    shmem_sync_all();
                }

                // make execution of task on another thread probable by waiting for signal of task
                my_wait(&flag, 1);
                // CONFLICT
                printf("remote is %d\n", remote);
            }
        }
    }

{% endblock main %}