{% extends "templates/SHMEM/shmem-boilerplate.c.j2" %}

{% block preamble %}
{% endblock preamble %}

{%- block additional_declarations %}

__attribute__((noinline)) void deeeeeeeeep(int* rem_ptr, int* lbuf_ptr) {
    {%- if race %}
    /* conflicting {{ op1.name }} and {{ op2.name }} */
    // CONFLICT
    {%- endif %}
    {{ replace_with_buffers(op1) }}
}

__attribute__((noinline)) void deeeeeeeep(int* rem_ptr, int* lbuf_ptr) { deeeeeeeeep(rem_ptr, lbuf_ptr); }
__attribute__((noinline)) void deeeeeeep(int* rem_ptr, int* lbuf_ptr) { deeeeeeeep(rem_ptr, lbuf_ptr); }
__attribute__((noinline)) void deeeeeep(int* rem_ptr, int* lbuf_ptr) { deeeeeeep(rem_ptr, lbuf_ptr); }
__attribute__((noinline)) void deeeeep(int* rem_ptr, int* lbuf_ptr) { deeeeeep(rem_ptr, lbuf_ptr); }
__attribute__((noinline)) void deeeep(int* rem_ptr, int* lbuf_ptr) { deeeeep(rem_ptr, lbuf_ptr); }
__attribute__((noinline)) void deeep(int* rem_ptr, int* lbuf_ptr) { deeeep(rem_ptr, lbuf_ptr); }
__attribute__((noinline)) void deep(int* rem_ptr, int* lbuf_ptr) { deeep(rem_ptr, lbuf_ptr); }

void rank0(int* rem_ptr, int* lbuf_ptr) {
    deep(rem_ptr, lbuf_ptr);
}

{% endblock additional_declarations %}

{% block main %}
    int* rem_ptr = &remote;
    int* lbuf_ptr = &localbuf;

    shmem_barrier_all();

    if (my_pe == 0) {
        rank0(rem_ptr, lbuf_ptr);
    } else {
        {%- if race %}
        // CONFLICT
        {%- endif %}
        {{ replace_with_buffers(op2)}}
    }

{% endblock main %}
