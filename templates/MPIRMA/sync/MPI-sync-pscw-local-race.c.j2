{% extends "templates/MPIRMA/MPI-boilerplate.c.j2" %}

{%- block race_labels %}
{%- if race %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "local",
    "ACCESS_SET": ["local buffer write","load"],
    "RACE_PAIR": ["MPI_Get@{race_loc1}","LOAD@{race_loc2}"],
    "NPROCS": 2,
    "CONSISTENCY_CALLS": ["MPI_Win_start,MPI_Win_complete,MPI_Win_post,MPI_Win_wait"],
    "SYNC_CALLS": ["MPI_Win_start,MPI_Win_complete,MPI_Win_post,MPI_Win_wait"],
    "DESCRIPTION": "Two conflicting operations get and load which are not synchronized correcly in PSCW mode leading to a local race."
}
*/
// RACE LABELS END
{%- else %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "none",
    "ACCESS_SET": ["local buffer write","load"],
    "NPROCS": 2,
    "CONSISTENCY_CALLS": ["MPI_Win_lock_all,MPI_Win_unlock_all,MPI_Win_flush_local_all"],
    "SYNC_CALLS": ["MPI_Barrier"],
    "DESCRIPTION": "Two conflicting operations get and load which are correctly synchronized in PSCW mode leading to a local race."
}
*/
// RACE LABELS END
{%- endif %}
{%- endblock race_labels %}

{% block main %}

    MPI_Group world_group;
    MPI_Comm_group(MPI_COMM_WORLD, &world_group);

    MPI_Barrier(MPI_COMM_WORLD);

    if (rank == 0) {
        const int destrank = 1;
        MPI_Group destgroup;
        MPI_Group_incl(world_group, 1, &destrank, &destgroup);

        MPI_Win_start(destgroup, 0, win);
{%- if race %}
        /* conflicting {{ op1.name }} and {{ op2.name }} */
        // CONFLICT
        MPI_Get(&value, 1, MPI_INT, 1, 0, 1, MPI_INT, win);
        // CONFLICT
        printf("value is %d\n", value);
{%- else %}
        MPI_Get(&value, 1, MPI_INT, 1, 0, 1, MPI_INT, win);
{%- endif %}
        MPI_Win_complete(win);
{%- if not race %}
        printf("value is %d\n", value);
{%- endif %}
    } else {
        const int srcrank = 0;
        MPI_Group srcgroup;
        MPI_Group_incl(world_group, 1, &srcrank, &srcgroup);
        MPI_Win_post(srcgroup, 0, win);
        MPI_Win_wait(win);
    }

    

{% endblock main %}

