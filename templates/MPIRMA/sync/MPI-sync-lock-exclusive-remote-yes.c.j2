{% extends "templates/MPIRMA/MPI-boilerplate.c.j2" %}

{%- block race_labels %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "remote",
    "ACCESS_SET": ["rma write","load"],
    "RACE_PAIR": ["MPI_Put@{race_loc1}","LOAD@{race_loc2}"],
    "NPROCS": 2,
    "CONSISTENCY_CALLS": ["MPI_Win_lock,MPI_Win_unlock"],
    "SYNC_CALLS": ["MPI_Barrier"],
    "DESCRIPTION": "Two conflicting operations put and load, where non-deterministic lock synchronization leads to a race."
}
*/
// RACE LABELS END
{%- endblock race_labels %}


{% block win_allocate %}
    MPI_Win win2;
    int* win_base2;

    MPI_Win_allocate(WIN_SIZE * sizeof(int), sizeof(int), MPI_INFO_NULL, MPI_COMM_WORLD, &win_base, &win);
    MPI_Win_allocate(WIN_SIZE * sizeof(int), sizeof(int), MPI_INFO_NULL, MPI_COMM_WORLD, &win_base2, &win2);
{% endblock win_allocate %}


{% block main %}
    for (int i = 0; i < WIN_SIZE; i++) {
        win_base[i] = 0;
        win_base2[i] = 0;
    }

    MPI_Barrier(MPI_COMM_WORLD);

    if (rank == 0) {
        MPI_Win_lock(MPI_LOCK_EXCLUSIVE, 1, 0, win);
        // CONFLICT
        MPI_Put(&value, 1, MPI_INT, 1, 0, 1, MPI_INT, win);
        MPI_Win_unlock(1, win);

        sleep(1); // do not remove, with that we enforce that rank 1 first locks

        // sync with rank 1
        MPI_Win_lock(MPI_LOCK_EXCLUSIVE, 1, 0, win2);
        MPI_Win_unlock(1, win2);
    } else {
        // sync with rank 0
        MPI_Win_lock(MPI_LOCK_EXCLUSIVE, 1, 0, win2);
        MPI_Win_unlock(1, win2);
        // CONFLICT
        printf("win_base[0] is %d\n", win_base[0]);
    }
    
    
    MPI_Win_free(&win2);

{% endblock main %}

