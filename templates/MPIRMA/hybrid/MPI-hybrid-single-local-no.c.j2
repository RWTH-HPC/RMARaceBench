{% extends "templates/MPIRMA/MPI-boilerplate.c.j2" %}

{%- block race_labels %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "none",
    "CONSISTENCY_CALLS": ["MPI_Win_lock","MPI_Win_unlock"],
    "SYNC_CALLS": ["MPI_Barrier"],
    "NPROCS": 2,
    "DESCRIPTION": "Two conflicting operations MPI_Get and a local load with synchronization at process 0. The OpenMP barrier enforces that all threads of the target synchronize with the origin."
}
*/
// RACE LABELS END
{%- endblock race_labels %}

{% block preamble %}
{% endblock preamble %}

{% block main %}



    MPI_Barrier(MPI_COMM_WORLD);

    if (rank == 0) {
        #pragma omp parallel num_threads(2)
        {
            #pragma omp single
            {
                MPI_Win_lock(MPI_LOCK_EXCLUSIVE, 1, 0, win);
                MPI_Get(&win_base[0], 1, MPI_INT, 1, 0, 1, MPI_INT, win);
                MPI_Win_unlock(1, win);
            }
            printf("win_base[0] is %d\n", win_base[0]);
        }
        MPI_Barrier(MPI_COMM_WORLD);
    }

    if (rank == 1) {
        MPI_Barrier(MPI_COMM_WORLD);
        printf("win_base[0] is %d\n", win_base[0]);
    }

    

{% endblock main %}