/* Part of RMARaceBench, under BSD-3-Clause License
 * See https://github.com/RWTH-HPC/RMARaceBench/LICENSE for license information.
 * SPDX-License-Identifier: BSD-3-Clause
 */

{% block race_labels %}
// RACE LABELS BEGIN
/*
{
{%- if race %}
    "RACE_KIND": "{{access_kind}}",
{%- else %}
    "RACE_KIND": "none",
{%- endif -%}
{%- if access_kind == 'local' %}
    "ACCESS_SET": ["{{op1.local_opkind}}","{{op2.local_opkind}}"],
{%- elif access_kind == 'remote' %}
    "ACCESS_SET": ["{{op1.remote_opkind}}","{{op2.remote_opkind}}"],
{%- endif -%}
{%- if race %}
    "RACE_PAIR": ["{{op1.callname}}@{race_loc1}","{{op2.callname}}@{race_loc2}"],
    "NPROCS": {{nprocs}},
    "DESCRIPTION": "Two conflicting operations {{op1.name}} and {{op2.name}} executed concurrently which leads to a race."
{%- else %}
    "NPROCS": {{nprocs}},
    "DESCRIPTION": "Two non-conflicting operations {{op1.name}} and {{op2.name}} executed concurrently with no race."
{%- endif %}
}
*/
// RACE LABELS END 

{%- if race %}
// RACE_KIND: {{access_kind}}
{%- else %}
// RACE_KIND: none
{%- endif -%}
{%- if access_kind == 'local' %}
// ACCESS_SET: [{{op1.local_opkind}},{{op2.local_opkind}}]
{%- elif access_kind == 'remote' %}
// ACCESS_SET: [{{op1.remote_opkind}},{{op2.remote_opkind}}]
{%- endif -%}
{%- if race %}
// RACE_PAIR: [{{op1.callname}}@{race_loc1},{{op2.callname}}@{race_loc2}]
{%- endif -%}
{%- endblock race_labels %}
{%- block preamble %}
{% endblock preamble%}


#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

{%- block additional_declarations %}
{% endblock additional_declarations %}

#define PROC_NUM {{ nprocs }}
#define WIN_SIZE 10

int main(int argc, char** argv)
{
    int rank, size;
    MPI_Win win;
    int* win_base;
    int value = 1, value2 = 2;
    int* buf = &value;
    int result;
    int token = 42;

{% if not threaded %}
    MPI_Init(&argc, &argv);
{%- else %}
    int provided;
    MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &provided);
    if (provided < MPI_THREAD_MULTIPLE) {
        printf("MPI_THREAD_MULTIPLE not supported\n");
        MPI_Abort(MPI_COMM_WORLD, 1);
    }
{%- endif %}
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (size != PROC_NUM) {
        printf("Wrong number of MPI processes: %d. Expected: %d\n", size, PROC_NUM);
        MPI_Abort(MPI_COMM_WORLD, 1);
    }

{% block win_allocate %}
    MPI_Win_allocate(WIN_SIZE * sizeof(int), sizeof(int), MPI_INFO_NULL, MPI_COMM_WORLD, &win_base, &win);
    for (int i = 0; i < WIN_SIZE; i++) {
        win_base[i] = 0;
    }
{%- endblock win_allocate %}

    {%- block main %}
    {%- endblock main %}

    MPI_Barrier(MPI_COMM_WORLD);
    printf("Process %d: Execution finished, variable contents: value = %d, value2 = %d, win_base[0] = %d\n", rank, *buf, value2, win_base[0]);
    
    MPI_Win_free(&win);
    MPI_Finalize();

    return 0;
}

{% block epilogue %}
{% endblock epilogue %}
