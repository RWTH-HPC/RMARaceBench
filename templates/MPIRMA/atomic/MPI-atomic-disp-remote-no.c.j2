{% extends "templates/MPIRMA/MPI-boilerplate.c.j2" %}

{% block race_labels %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "none",
    "ACCESS_SET": ["rma atomic write","rma atomic write"],
    "NPROCS": 3,
    "CONSISTENCY_CALLS": ["MPI_Win_fence"],
    "SYNC_CALLS": ["MPI_Barrier", "MPI_Win_fence"],
    "DESCRIPTION": "Two atomic operations acc and acc. Since the displacement respects the size of the datatype, atomicity is given."
}
*/
// RACE LABELS END
{% endblock race_labels %}

{% block win_allocate %}
    MPI_Win_allocate(WIN_SIZE * sizeof(int), 1, MPI_INFO_NULL, MPI_COMM_WORLD, &win_base, &win);
    for (int i = 0; i < WIN_SIZE; i++) {
        win_base[i] = 0;
    }
{% endblock win_allocate %}

{% block main %}
    MPI_Barrier(MPI_COMM_WORLD);

    MPI_Win_fence(0, win);
    if (rank == 0) {
        int value1[4] = {1, 1, 1, 1};

        MPI_Accumulate(value1, 4, MPI_INT, 1, 0, 4, MPI_INT, MPI_SUM, win);

    }
    if (rank == 2) {
        int value2[4] = {1, 2, 3, 4};
        int typesize;
        MPI_Type_size(MPI_INT, &typesize);
        MPI_Accumulate(value2, 4, MPI_INT, 1, typesize, 4, MPI_INT, MPI_SUM, win);
    }
    MPI_Win_fence(0, win);
    

{% endblock main %}

// 
