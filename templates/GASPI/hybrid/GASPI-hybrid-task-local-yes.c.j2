{% extends "templates/GASPI/GASPI-boilerplate.c.j2" %}

{%- block race_labels %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "local",
    "ACCESS_SET": ["rma read","load"],
    "RACE_PAIR": ["gaspi_read@{race_loc1}","STORE@{race_loc2}"],
    "CONSISTENCY_CALLS": ["gaspi_wait"],
    "SYNC_CALLS": ["gaspi_barrier"],
    "NPROCS": 2,
    "DESCRIPTION": "Two conflicting operations gaspi_read and a local store with missing synchronization at process 0. Since there is no taskwait, local store and access epoch of the gaspi_read are concurrent, resulting in a local buffer race."
}
*/
// RACE LABELS END
{%- endblock race_labels %}

{% block additional_declarations %}
#include <unistd.h>

void my_signal(int *s) {
    #pragma omp atomic
    (*s)++;
}

void my_wait(int* s, int v) {
    int wait = 0;
    do {
        usleep(10);
        #pragma omp atomic read
        wait = (*s);
    } while (wait < v);
}
{% endblock additional_declarations  %}

{% block preamble %}
{% endblock preamble %}

{% block main %}

    if (rank == 0) {
        int flag = 0;
        #pragma omp parallel num_threads(2) shared(flag)
        {
            #pragma omp single
            {
                #pragma omp task shared(flag)
                {
                    my_signal(&flag);
                    // CONFLICT
                    gaspi_read(loc_seg_id, 0, 1, remote_seg_id, 0, sizeof(int), queue_id, GASPI_BLOCK);
                    gaspi_wait(queue_id, GASPI_BLOCK);
                }

                // make execution of task on another thread probable by waiting for signal of task
                my_wait(&flag, 1);
                // CONFLICT
                printf("localbuf[0] is %d\n", localbuf[0]);
            }
        }
        gaspi_barrier(GASPI_GROUP_ALL, GASPI_BLOCK);
    }

    if (rank == 1) {
        gaspi_barrier(GASPI_GROUP_ALL, GASPI_BLOCK);
        printf("remote_data[0] is %d\n", remote_data[0]);
    }


{% endblock main %}