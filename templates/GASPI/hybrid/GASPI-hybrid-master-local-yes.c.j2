{% extends "templates/GASPI/GASPI-boilerplate.c.j2" %}

{%- block race_labels %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "local",
    "ACCESS_SET": ["rma read","load"],
    "RACE_PAIR": ["gaspi_read@{race_loc1}","LOAD@{race_loc2}"],
    "CONSISTENCY_CALLS": ["gaspi_wait"],
    "SYNC_CALLS": ["gaspi_barrier"],
    "NPROCS": 2,
    "DESCRIPTION": "Two conflicting operations gaspi_read and a local load with missing synchronization at process 0. Since the main thread of the target synchronizes with the origin, the access of the non-master thread leads to a local buffer race."
}
*/
// RACE LABELS END
{%- endblock race_labels %}

{% block preamble %}
{% endblock preamble %}

{% block main %}

    if (rank == 0) {
        #pragma omp parallel num_threads(2)
        {
            #pragma omp master
            {
                // CONFLICT
                gaspi_read(loc_seg_id, 0, 1, remote_seg_id, 0, sizeof(int), queue_id, GASPI_BLOCK);
                gaspi_wait(queue_id, GASPI_BLOCK);
            }

            // CONFLICT
            printf("localbuf[0] is %d\n", localbuf[0]);
        }
        gaspi_barrier(GASPI_GROUP_ALL, GASPI_BLOCK);
    }

    if (rank == 1) {
        gaspi_barrier(GASPI_GROUP_ALL, GASPI_BLOCK);
        printf("remote_data[0] is %d\n", remote_data[0]);
    }

{% endblock main %}