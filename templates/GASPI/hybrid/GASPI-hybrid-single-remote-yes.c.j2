{% extends "templates/GASPI/GASPI-boilerplate.c.j2" %}

{%- block race_labels %}
// RACE LABELS BEGIN
/*
{
    "RACE_KIND": "remote",
    "ACCESS_SET": ["rma read","load"],
    "RACE_PAIR": ["gaspi_write_notify@{race_loc1}","LOAD@{race_loc2}"],
    "CONSISTENCY_CALLS": ["gaspi_wait","gaspi_notify_waitsome"],
    "SYNC_CALLS": ["gaspi_notify_waitsome"],
    "NPROCS": 2,
    "DESCRIPTION": "Two conflicting operations gaspi_write_notify and a local load with missing synchronization at process 1. Since only the main thread of the target synchronizes with the origin, the access of the non-master thread leads to a remote race."
}
*/
// RACE LABELS END
{%- endblock race_labels %}

{% block preamble %}
{% endblock preamble %}

{% block main %}

    if (rank == 0) {
        // CONFLICT
        gaspi_write_notify(loc_seg_id, 0, 1, remote_seg_id, 0, sizeof(int), 0, 1, queue_id, GASPI_BLOCK);
        gaspi_wait(queue_id, GASPI_BLOCK);
    }

    if (rank == 1) {
        #pragma omp parallel num_threads(2)
        {
            #pragma omp single nowait
            { 
                gaspi_notification_id_t firstId;
                gaspi_notify_waitsome(remote_seg_id, 0, 1, &firstId, GASPI_BLOCK);
            }
            // CONFLICT
            printf("remote_data[0] is %d\n", remote_data[0]);
    }
        
    }

{% endblock main %}